// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: article_category.sql

package db

import (
	"context"
)

const createArticleCategory = `-- name: CreateArticleCategory :one
INSERT INTO "article_categories" ("article_id", "category_id")
VALUES ($1, $2)
RETURNING article_id, category_id
`

type CreateArticleCategoryParams struct {
	ArticleID  int32 `json:"article_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) CreateArticleCategory(ctx context.Context, arg CreateArticleCategoryParams) (ArticleCategory, error) {
	row := q.db.QueryRowContext(ctx, createArticleCategory, arg.ArticleID, arg.CategoryID)
	var i ArticleCategory
	err := row.Scan(&i.ArticleID, &i.CategoryID)
	return i, err
}

const getArticleCategoryByArticleId = `-- name: GetArticleCategoryByArticleId :many
SELECT article_id, category_id, id, name FROM "article_categories"
JOIN "categories" ON "article_categories".category_id = "categories".id
WHERE "article_categories".article_id = $1
`

type GetArticleCategoryByArticleIdRow struct {
	ArticleID  int32  `json:"article_id"`
	CategoryID int32  `json:"category_id"`
	ID         int32  `json:"id"`
	Name       string `json:"name"`
}

func (q *Queries) GetArticleCategoryByArticleId(ctx context.Context, articleID int32) ([]GetArticleCategoryByArticleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getArticleCategoryByArticleId, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetArticleCategoryByArticleIdRow{}
	for rows.Next() {
		var i GetArticleCategoryByArticleIdRow
		if err := rows.Scan(
			&i.ArticleID,
			&i.CategoryID,
			&i.ID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
