// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: category.sql

package db

import (
	"context"
)

const countCategory = `-- name: CountCategory :one
SELECT COUNT(*) FROM "categories"
`

func (q *Queries) CountCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO "categories" ("name")
VALUES ($1) RETURNING id, name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findCategory = `-- name: FindCategory :one
SELECT id, name
FROM "categories"
WHERE id = $1
`

func (q *Queries) FindCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
