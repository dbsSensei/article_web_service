// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: article_tag.sql

package db

import (
	"context"
)

const createArticleTag = `-- name: CreateArticleTag :one
INSERT INTO "article_tags" ("article_id", "tag_id")
VALUES ($1, $2) RETURNING article_id, tag_id
`

type CreateArticleTagParams struct {
	ArticleID int32 `json:"article_id"`
	TagID     int32 `json:"tag_id"`
}

func (q *Queries) CreateArticleTag(ctx context.Context, arg CreateArticleTagParams) (ArticleTag, error) {
	row := q.db.QueryRowContext(ctx, createArticleTag, arg.ArticleID, arg.TagID)
	var i ArticleTag
	err := row.Scan(&i.ArticleID, &i.TagID)
	return i, err
}

const getArticleTagByArticleId = `-- name: GetArticleTagByArticleId :many
SELECT article_id, tag_id, id, name
FROM "article_tags"
         JOIN "tags" ON "article_tags".tag_id = "tags".id
WHERE "article_tags".article_id = $1
`

type GetArticleTagByArticleIdRow struct {
	ArticleID int32  `json:"article_id"`
	TagID     int32  `json:"tag_id"`
	ID        int32  `json:"id"`
	Name      string `json:"name"`
}

func (q *Queries) GetArticleTagByArticleId(ctx context.Context, articleID int32) ([]GetArticleTagByArticleIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getArticleTagByArticleId, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetArticleTagByArticleIdRow{}
	for rows.Next() {
		var i GetArticleTagByArticleIdRow
		if err := rows.Scan(
			&i.ArticleID,
			&i.TagID,
			&i.ID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
